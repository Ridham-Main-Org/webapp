name: Packer build

on:
  push:
    branches: [main]

jobs:
  integration-test-job:
    name: Integration Test Job
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USERNAME: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DB: UserDB
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Install dependencies
        run: npm i

      - name: Run tests
        run: npm test
        env:
          DB_USER: "postgres"
          DB_PASSWORD: "postgres"
          DB_HOST: "127.0.0.1"
          DB_NAME: "UserDB"
          DB_PORT: 5432
          NODE_ENV: testing


  build-artifact-setup-gcloud:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: integration-test-job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info
      
      - name: Build Application Artifact
        run: |
          zip -r my-webapp-copy.zip .
      
      - name: Packer Init
        run: packer init ./packer/gcp-centos8.pkr.hcl

      - name: Build Packer Template
        run: |
          PACKER_OUTPUT=$(packer build \
            -var 'project_id=${{ secrets.GCP_PROJECT_ID }}' \
            -var 'zone=${{ secrets.GCP_ZONE }}' \
            ./packer/gcp-centos8.pkr.hcl)
          
          CUSTOM_IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep -oP "webapp-image-\d+")
          echo "Custom Image ID: $CUSTOM_IMAGE_ID"
          NEW_TEMPLATE_NAME="new-template-$(openssl rand -hex 4)"

          TEMPLATE_PATH="projects/${{ secrets.GCP_PROJECT_NUM }}/regions/${{ secrets.REGION }}/instanceTemplates"
          CUSTOM_IMAGE_PATH="projects/${{ secrets.GCP_PROJECT_ID }}/global/images"

          gcloud compute instance-templates create $NEW_TEMPLATE_NAME \
            --source-instance=${{ secrets.SOURCE_INSTANCE }} \
            --source-instance-zone=${{ secrets.SOURCE_INSTANCE_ZONE }} \
            --instance-template-region=${{ secrets.REGION }} \
            --configure-disk=device-name=persistent-disk-0,instantiate-from=custom-image,custom-image=$CUSTOM_IMAGE_PATH/$CUSTOM_IMAGE_ID,auto-delete=yes
          
          gcloud compute instance-groups managed set-instance-template ${{ secrets.INSTANCE_GROUP_MANAGER }} \
            --template=$TEMPLATE_PATH/$NEW_TEMPLATE_NAME \
            --region=${{ secrets.REGION }}
          
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.INSTANCE_GROUP_MANAGER }} \
            --version=template=$TEMPLATE_PATH/$NEW_TEMPLATE_NAME \
            --region=${{ secrets.REGION }}

      - name: Wait for Target Reach
        run: |
          gcloud compute instance-groups managed wait-until ${{ secrets.INSTANCE_GROUP_MANAGER }} \
            --version-target-reached \
            --region=${{ secrets.REGION }}
